{"version":3,"sources":["assets/images/list.svg","components/Badge/Badge.jsx","components/api/api.js","assets/images/remove.svg","components/List/List.jsx","assets/images/close.svg","components/AddButtonList/AddList.jsx","assets/images/edit.svg","assets/images/add.svg","components/Tasks/AddTaskForm.jsx","components/Tasks/Task.jsx","components/Tasks/Tasks.jsx","App.js","index.js"],"names":["Badge","color","onClick","className","classNames","instance","axios","withCredentials","baseURL","listsAPI","setLists","get","then","response","data","item","onRemove","delete","id","list","newTitle","patch","name","catch","alert","inputValue","colors","selectedColor","onAdd","onClose","setIsLoading","post","colorId","filter","c","listObj","tasks","finally","tasksAPI","taskObj","newTaskText","text","taskId","completed","obj","onAddTask","toggleFormVisible","console","log","colorsAPI","setColors","List","items","isRemovable","onClickItem","activeItem","map","index","active","icon","length","src","removeSvg","alt","window","confirm","removeList","AddList","useState","visiblePopup","setVisiblePopup","selectColor","isLoading","setInputValue","useEffect","Array","isArray","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","closeSvg","value","onChange","e","target","type","placeholder","AddTaskForm","visibleForm","setVisibleForm","disabled","listId","addSvg","Task","onEdit","onComplete","checked","htmlFor","Tasks","onEditTitle","onRemoveTask","onEditTask","onCompleteTask","withoutEmpty","to","style","hex","prompt","editSvg","task","App","lists","setActiveItem","history","useHistory","useLocation","newList","onEditListTitle","title","location","pathname","split","find","Number","push","listSvg","newLists","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ebe512e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/list.2b422bc7.svg\";","import React from 'react';\r\nimport './Badge.scss'\r\nimport classNames from \"classnames\";\r\n\r\nconst Badge = ({ color, onClick, className }) => {\r\n    return (\r\n        <i\r\n            onClick={onClick}\r\n            className={classNames('badge', {[`badge--${color}`]: color}, className)}></i>\r\n    );\r\n}\r\n\r\nexport default Badge;","import * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    // baseURL: 'http://localhost:3004/',\r\n    baseURL: 'https://my-json-server.typicode.com/KhmaraD/todo-app/blob/master/', // for gh-pages\r\n})\r\n\r\nexport const listsAPI = {\r\n    getAllLists(setLists) {\r\n        return instance.get(`lists?_expand=color&_embed=tasks`)\r\n            .then(response => {\r\n                return setLists(response.data);\r\n            });\r\n    },\r\n    deleteList(item, onRemove) {\r\n        return instance.delete(`lists/${item.id}`)\r\n            .then(() => {\r\n                onRemove(item.id);\r\n            });\r\n    },\r\n    editListTitle(list, newTitle) {\r\n        return instance.patch(`lists/${list.id}`, {name: newTitle})\r\n            .catch(() => {\r\n            alert('Failed to update list title');\r\n        });\r\n    },\r\n    addList(inputValue, colors, selectedColor, onAdd, onClose, setIsLoading) {\r\n        return instance.post(`lists`, {\r\n            name: inputValue,\r\n            colorId: selectedColor\r\n        })\r\n            .then((response) => {\r\n                const color = colors.filter(c => c.id === selectedColor)[0];\r\n                const listObj = { ...response.data, color, tasks: [] };\r\n                onAdd(listObj);\r\n                onClose();\r\n            })\r\n            .catch(() => {\r\n                alert('Error adding list!')\r\n            })\r\n            .finally(() => {\r\n                setIsLoading(false);\r\n            });\r\n    },\r\n}\r\n\r\nexport const tasksAPI = {\r\n    editTask(taskObj, newTaskText) {\r\n        return instance.patch(`tasks/${taskObj.id}`, {text: newTaskText})\r\n            .catch(() => {\r\n                alert('Failed to update task');\r\n            });\r\n    },\r\n    deleteTask(taskId) {\r\n        return instance.delete(`tasks/${taskId}`)\r\n            .catch(() => {\r\n                alert('Failed to delete task');\r\n            });\r\n    },\r\n    completeTask(taskId, completed) {\r\n        return instance.patch(`tasks/${taskId}`, {completed})\r\n            .catch(() => {\r\n                alert('Failed to update task');\r\n            });\r\n    },\r\n    addTask(obj, onAddTask, list, toggleFormVisible, setIsLoading) {\r\n        return instance.post(`tasks`, obj)\r\n            .then(({data}) => {\r\n                console.log(data);\r\n                onAddTask(list.id, data);\r\n                toggleFormVisible();\r\n            })\r\n            .catch(() => {\r\n                alert('error adding task!')\r\n            })\r\n            .finally(() => {\r\n                setIsLoading(false);\r\n            });\r\n    },\r\n}\r\n\r\nexport const colorsAPI = {\r\n    getColors(setColors) {\r\n        return instance.get('colors')\r\n            .then(response => {\r\n                return setColors(response.data)\r\n            });\r\n    },\r\n}\r\n","export default __webpack_public_path__ + \"static/media/remove.f5660af3.svg\";","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport Badge from '../Badge/Badge';\r\nimport {listsAPI} from \"../api/api\";\r\nimport removeSvg from '../../assets/images/remove.svg'\r\nimport './List.scss';\r\n\r\nconst List = ({items, isRemovable, onClick, onRemove, onClickItem, activeItem}) => {\r\n\r\n    const removeList = (item) => {\r\n        if (window.confirm('Delete list?')) {\r\n            listsAPI.deleteList(item, onRemove);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ul onClick={onClick} className=\"list\">\r\n            {items.map((item, index) => (\r\n                <li\r\n                    key={index}\r\n                    className={classNames(item.className, {\r\n                        active: item.active\r\n                            ? item.active\r\n                            : activeItem && activeItem.id === item.id\r\n                    })}\r\n                    onClick={onClickItem ? () => onClickItem(item) : null}\r\n                >\r\n                    <i>{item.icon ? item.icon : <Badge color={item.color.name} />}</i>\r\n                    <span>\r\n            {item.name}\r\n                        {item.tasks && ` (${item.tasks.length})`}\r\n          </span>\r\n                    {isRemovable && (\r\n                        <img\r\n                            className=\"list__remove-icon\"\r\n                            src={removeSvg}\r\n                            alt=\"Remove icon\"\r\n                            onClick={() => removeList(item)}\r\n                        />\r\n                    )}\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default List;","export default __webpack_public_path__ + \"static/media/close.b83c2023.svg\";","import React, {useEffect, useState} from 'react';\r\nimport List from \"../List/List\";\r\nimport Badge from \"../Badge/Badge\";\r\nimport {listsAPI} from \"../api/api\";\r\n\r\nimport closeSvg from '../../assets/images/close.svg'\r\nimport \"./AddList.scss\";\r\n\r\nconst AddList = ({ colors, onAdd }) => {\r\n    const [visiblePopup, setVisiblePopup] = useState(false);\r\n    const [selectedColor, selectColor] = useState(3);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (Array.isArray(colors)) {\r\n            selectColor(colors[0].id);\r\n        }\r\n    }, [colors]);\r\n\r\n    const onClose = () => {\r\n        setVisiblePopup(false);\r\n        setInputValue('');\r\n        selectColor(colors[0].id);\r\n    }\r\n\r\n    const addList = () => {\r\n        if (!inputValue) {\r\n            alert('Enter the name of the list');\r\n            return;\r\n        }\r\n        setIsLoading(true);\r\n        listsAPI.addList(inputValue, colors, selectedColor, onAdd, onClose, setIsLoading);\r\n    }\r\n\r\n    return (\r\n        <div className=\"add-list\">\r\n            <List\r\n                onClick={ () => setVisiblePopup(true)}\r\n                items={[\r\n                {\r\n                    className: \"list__add-button\",\r\n                    icon: (\r\n                        <svg width=\"12\" height=\"12\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path d=\"M8 1V15\" stroke=\"black\" strokeWidth=\"2\" strokeLinecap=\"round\"\r\n                                  strokeLinejoin=\"round\"/>\r\n                            <path d=\"M1 8H15\" stroke=\"black\" strokeWidth=\"2\" strokeLinecap=\"round\"\r\n                                  strokeLinejoin=\"round\"/>\r\n                        </svg>\r\n                    ),\r\n                    name: 'Add list',\r\n                },\r\n            ]} />\r\n            {visiblePopup && <div className=\"add-list__popup\">\r\n                <img\r\n                    onClick={onClose}\r\n                    src={closeSvg}\r\n                    alt=\"Close button\"\r\n                    className=\"add-list__popup-close-btn\"/>\r\n                <input value={inputValue}\r\n                       onChange={e => setInputValue(e.target.value)}\r\n                       className=\"field\"\r\n                       type=\"text\"\r\n                       placeholder=\"List name\"/>\r\n                <div className=\"add-list__popup-colors\">\r\n                    { colors.map(color => (\r\n                        <Badge\r\n                            onClick={() => selectColor(color.id)}\r\n                            key={color.id}\r\n                            color={color.name}\r\n                            className={selectedColor === color.id && 'active'}/>\r\n                    ))}\r\n                </div>\r\n                <button onClick={addList} className=\"button\">\r\n                    {isLoading ? 'Adding...' : 'Add'}\r\n                </button>\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddList;","export default __webpack_public_path__ + \"static/media/edit.1bda04de.svg\";","export default __webpack_public_path__ + \"static/media/add.c4fa83e1.svg\";","import React, {useState} from 'react';\r\nimport addSvg from \"../../assets/images/add.svg\";\r\nimport {tasksAPI} from \"../api/api\";\r\n\r\nconst AddTaskForm = ({list, onAddTask}) => {\r\n    const [visibleForm, setVisibleForm] = useState(false);\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    const toggleFormVisible = () => {\r\n        setVisibleForm(!visibleForm);\r\n        setInputValue('');\r\n    };\r\n\r\n    const addTask = () => {\r\n        const obj = {\r\n            listId: list.id,\r\n            text: inputValue,\r\n            completed: false\r\n        };\r\n        setIsLoading(true);\r\n        tasksAPI.addTask(obj, onAddTask, list, toggleFormVisible, setIsLoading);\r\n    };\r\n\r\n    return (\r\n        <div className=\"tasks__form\">\r\n            {!visibleForm\r\n                ? <div onClick={toggleFormVisible} className=\"tasks__form-new\">\r\n                    <img src={addSvg} alt=\"Add icon\"/>\r\n                    <span>New task</span>\r\n                </div>\r\n                : <div className=\"tasks__form-block\">\r\n                    <input value={inputValue}\r\n                           className=\"field\"\r\n                           type=\"text\"\r\n                           placeholder=\"Task name\"\r\n                           onChange={e => setInputValue(e.target.value)} />\r\n                    <button disabled={isLoading} onClick={addTask} className=\"button\">\r\n                        {isLoading ? 'Adding...' : 'Add task'}\r\n                    </button>\r\n                    <button onClick={toggleFormVisible} className=\"button button--grey\">\r\n                        Cancel\r\n                    </button>\r\n                </div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddTaskForm;","import React from 'react';\r\n\r\nconst Task = ({ id, text, completed, list, onRemove, onEdit, onComplete }) => {\r\n    const onChangeCheckbox = e => {\r\n        onComplete(list.id, id, e.target.checked);\r\n    };\r\n\r\n    return (\r\n        <div key={id} className=\"tasks__items-row\">\r\n            <div className=\"checkbox\">\r\n                <input\r\n                    onChange={onChangeCheckbox}\r\n                    id={`task-${id}`}\r\n                    type=\"checkbox\"\r\n                    checked={completed}\r\n                />\r\n                <label htmlFor={`task-${id}`}>\r\n                    <svg\r\n                        width=\"11\"\r\n                        height=\"8\"\r\n                        viewBox=\"0 0 11 8\"\r\n                        fill=\"none\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                        <path\r\n                            d=\"M9.29999 1.20001L3.79999 6.70001L1.29999 4.20001\"\r\n                            stroke=\"#000\"\r\n                            strokeWidth=\"1.5\"\r\n                            strokeLinecap=\"round\"\r\n                            strokeLinejoin=\"round\"\r\n                        />\r\n                    </svg>\r\n                </label>\r\n            </div>\r\n            <p>{text}</p>\r\n            <div className=\"tasks__items-row-actions\">\r\n                <div onClick={() => onEdit(list.id, { id, text })}>\r\n                    <svg\r\n                        width=\"15\"\r\n                        height=\"15\"\r\n                        viewBox=\"0 0 15 15\"\r\n                        fill=\"none\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                        <path\r\n                            d=\"M0 12.0504V14.5834C0 14.8167 0.183308 15 0.41661 15H2.9496C3.05792 15 3.16624 14.9583 3.24123 14.875L12.34 5.78458L9.21542 2.66001L0.124983 11.7504C0.0416611 11.8338 0 11.9337 0 12.0504ZM14.7563 3.36825C14.8336 3.29116 14.8949 3.1996 14.9367 3.0988C14.9785 2.99801 15 2.88995 15 2.78083C15 2.6717 14.9785 2.56365 14.9367 2.46285C14.8949 2.36205 14.8336 2.27049 14.7563 2.19341L12.8066 0.24367C12.7295 0.166428 12.638 0.105146 12.5372 0.0633343C12.4364 0.021522 12.3283 0 12.2192 0C12.1101 0 12.002 0.021522 11.9012 0.0633343C11.8004 0.105146 11.7088 0.166428 11.6318 0.24367L10.107 1.76846L13.2315 4.89304L14.7563 3.36825V3.36825Z\"\r\n                            fill=\"black\"\r\n                        />\r\n                    </svg>\r\n                </div>\r\n                <div onClick={() => onRemove(list.id, id)}>\r\n                    <svg\r\n                        width=\"11\"\r\n                        height=\"11\"\r\n                        viewBox=\"0 0 11 11\"\r\n                        fill=\"none\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                        <path\r\n                            d=\"M6.87215 5.5L10.7129 1.65926C10.8952 1.47731 10.9977 1.23039 10.9979 0.972832C10.9982 0.715276 10.8961 0.468178 10.7141 0.285898C10.5321 0.103617 10.2852 0.00108525 10.0277 0.000857792C9.77011 0.000630336 9.52302 0.102726 9.34074 0.284685L5.5 4.12542L1.65926 0.284685C1.47698 0.102404 1.22976 0 0.971974 0C0.714191 0 0.466965 0.102404 0.284685 0.284685C0.102404 0.466965 0 0.714191 0 0.971974C0 1.22976 0.102404 1.47698 0.284685 1.65926L4.12542 5.5L0.284685 9.34074C0.102404 9.52302 0 9.77024 0 10.028C0 10.2858 0.102404 10.533 0.284685 10.7153C0.466965 10.8976 0.714191 11 0.971974 11C1.22976 11 1.47698 10.8976 1.65926 10.7153L5.5 6.87458L9.34074 10.7153C9.52302 10.8976 9.77024 11 10.028 11C10.2858 11 10.533 10.8976 10.7153 10.7153C10.8976 10.533 11 10.2858 11 10.028C11 9.77024 10.8976 9.52302 10.7153 9.34074L6.87215 5.5Z\"\r\n                            fill=\"black\"\r\n                        />\r\n                    </svg>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Task;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {listsAPI} from \"../api/api\";\r\n\r\nimport editSvg from '../../assets/images/edit.svg';\r\n\r\nimport './Tasks.scss';\r\nimport AddTaskForm from './AddTaskForm';\r\nimport Task from './Task';\r\n\r\nconst Tasks = ({\r\n                   list,\r\n                   onEditTitle,\r\n                   onAddTask,\r\n                   onRemoveTask,\r\n                   onEditTask,\r\n                   onCompleteTask,\r\n                   withoutEmpty\r\n               }) => {\r\n    const editTitle = () => {\r\n        const newTitle = window.prompt('List name', list.name);\r\n        if (newTitle) {\r\n            onEditTitle(list.id, newTitle);\r\n            listsAPI.editListTitle(list, newTitle);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"tasks\">\r\n            <Link to={`/lists/${list.id}`}>\r\n                <h2 style={{ color: list.color.hex }} className=\"tasks__title\">\r\n                    {list.name}\r\n                    <img onClick={editTitle} src={editSvg} alt=\"Edit icon\" />\r\n                </h2>\r\n            </Link>\r\n\r\n            <div className=\"tasks__items\">\r\n                {!withoutEmpty && list.tasks && !list.tasks.length && (\r\n                    <h2>There are no tasks</h2>\r\n                )}\r\n                {list.tasks &&\r\n                list.tasks.map(task => (\r\n                    <Task\r\n                        key={task.id}\r\n                        list={list}\r\n                        onEdit={onEditTask}\r\n                        onRemove={onRemoveTask}\r\n                        onComplete={onCompleteTask}\r\n                        {...task}\r\n                    />\r\n                ))}\r\n                <AddTaskForm key={list.id} list={list} onAddTask={onAddTask} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tasks;","import './App.css';\r\nimport listSvg from \"./assets/images/list.svg\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport { List, AddList, Tasks} from './components';\r\nimport { Route, useLocation, useHistory } from 'react-router-dom';\r\nimport {colorsAPI, listsAPI, tasksAPI} from \"./components/api/api\";\r\n\r\nconst App = () => {\r\n    const [lists, setLists] = useState(null);\r\n    const [colors, setColors] = useState(null);\r\n    const [activeItem, setActiveItem] = useState(null);\r\n    let history = useHistory();\r\n    let location = useLocation()\r\n\r\n    useEffect(() => {\r\n        listsAPI.getAllLists(setLists);\r\n        colorsAPI.getColors(setColors);\r\n    }, []);\r\n\r\n    const onAddList = (obj) => {\r\n        const newList = [...lists, obj];\r\n        setLists(newList);\r\n    };\r\n\r\n    const onAddTask = (listId, taskObj) => {\r\n        const newList = lists.map(item => {\r\n            if (item.id === listId) {\r\n                item.tasks = [...item.tasks, taskObj]\r\n            }\r\n            return item;\r\n        });\r\n        setLists(newList);\r\n    };\r\n\r\n    const onEditListTitle = (id, title) => {\r\n        const newList = lists.map(item => {\r\n            if (item.id === id) {\r\n                item.name = title;\r\n            }\r\n            return item;\r\n        });\r\n        setLists(newList);\r\n    }\r\n\r\n    const onEditTask = (listId, taskObj) => {\r\n        const newTaskText = window.prompt('Task text', taskObj.text);\r\n\r\n        if (!newTaskText) {\r\n            return;\r\n        }\r\n\r\n        const newList = lists.map(list => {\r\n            if (list.id === listId) {\r\n                list.tasks = list.tasks.map(task => {\r\n                    if (task.id === taskObj.id) {\r\n                        task.text = newTaskText;\r\n                    }\r\n                    return task;\r\n                });\r\n            }\r\n            return list;\r\n        });\r\n        setLists(newList);\r\n        tasksAPI.editTask(taskObj, newTaskText);\r\n    };\r\n\r\n    const onRemoveTask = (listId, taskId) => {\r\n        if (window.confirm('Are you sure you want to delete the task?')) {\r\n            const newList = lists.map(item => {\r\n                if (item.id === listId) {\r\n                    item.tasks = item.tasks.filter(task => task.id !== taskId);\r\n                }\r\n                return item;\r\n            });\r\n            setLists(newList);\r\n            tasksAPI.deleteTask(taskId);\r\n        }\r\n    };\r\n\r\n    const onCompleteTask = (listId, taskId, completed) => {\r\n        const newList = lists.map(list => {\r\n            if (list.id === listId) {\r\n                list.tasks = list.tasks.map(task => {\r\n                    if (task.id === taskId) {\r\n                        task.completed = completed;\r\n                    }\r\n                    return task;\r\n                });\r\n            }\r\n            return list;\r\n        });\r\n        setLists(newList);\r\n        tasksAPI.completeTask(taskId, completed);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const listId = history.location.pathname.split('lists/')[1];\r\n        if (lists) {\r\n            const list = lists.find(list => list.id === Number(listId));\r\n            setActiveItem(list);\r\n        }\r\n    }, [lists, history.location.pathname]);\r\n\r\n    return (\r\n        <div className=\"todo\">\r\n            <div className=\"todo__sidebar\">\r\n                <List\r\n                    onClickItem={list => {\r\n                        history.push(`/`);\r\n                    }}\r\n                    items={[\r\n                        {\r\n                            active: !activeItem,\r\n                            icon: (\r\n                                <img src={listSvg} alt=\"list icon\" />\r\n                            ),\r\n                            name: 'All tasks',\r\n                        }\r\n                    ]}/>\r\n                {lists ? (\r\n                    <List\r\n                        items={lists}\r\n                        onRemove={id => {\r\n                            const newLists = lists.filter(item => item.id !== id);\r\n                            setLists(newLists);\r\n                        }}\r\n                        onClickItem={list => {\r\n                            history.push(`/lists/${list.id}`);\r\n                        }}\r\n                        activeItem={activeItem}\r\n                        isRemovable\r\n                    />\r\n                ) : (\r\n                    'Loading...'\r\n                )}\r\n                <AddList onAdd={onAddList} colors={colors} />\r\n            </div>\r\n            <div className=\"todo__tasks\">\r\n                <Route exact path=\"/\">\r\n                    {lists &&\r\n                    lists.map(list => (\r\n                        <Tasks\r\n                            key={list.id}\r\n                            list={list}\r\n                            onAddTask={onAddTask}\r\n                            onEditTitle={onEditListTitle}\r\n                            onRemoveTask={onRemoveTask}\r\n                            onEditTask={onEditTask}\r\n                            onCompleteTask={onCompleteTask}\r\n                            withoutEmpty/>\r\n                    ))}\r\n                </Route>\r\n                <Route path=\"/lists/:id\">\r\n                    {lists && activeItem && (\r\n                        <Tasks\r\n                            list={activeItem}\r\n                            onAddTask={onAddTask}\r\n                            onEditTitle={onEditListTitle}\r\n                            onRemoveTask={onRemoveTask}\r\n                            onEditTask={onEditTask}\r\n                            onCompleteTask={onCompleteTask}/>\r\n                    )}\r\n                </Route>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nimport './index.scss';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}